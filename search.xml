<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ruby新手村-字串和符號的差別</title>
    <url>/2022/11/26/Ruby%E6%96%B0%E6%89%8B%E6%9D%91-%E5%AD%97%E4%B8%B2%E5%92%8C%E7%AC%A6%E8%99%9F%E7%9A%84%E5%B7%AE%E5%88%A5/</url>
    <content><![CDATA[<hr>
<h1 id=""><a href="#" class="headerlink" title=""></a><div class="note info">
            <p><strong>『本篇重點』：什麼是符號，什麼是字串，他們的差別，個別使用時機，彼此如何轉換</strong>  </p>
          </div></h1><hr>
<h1 id="什麼是符號"><a href="#什麼是符號" class="headerlink" title="什麼是符號"></a><em><strong>什麼是符號</strong></em></h1><h2 id="1-語法："><a href="#1-語法：" class="headerlink" title="1.語法："></a>1.語法：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:apple              # 這個符號叫apple，會在符號名稱前面加上冒號</span><br></pre></td></tr></table></figure>
<h2 id="2-定義：-他也是一個物件"><a href="#2-定義：-他也是一個物件" class="headerlink" title="2.定義： 他也是一個物件"></a>2.定義： 他也是一個物件</h2><p>舉例來說：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1                   #數字物件</span><br><span class="line">&quot;aa&quot;                #字串物件</span><br><span class="line">:apple              #符號物件</span><br><span class="line">name = 1            #我指定name變數的值為數字1</span><br><span class="line">name = &quot;aa&quot;         #我指定name變數的值為字串aa</span><br><span class="line">name = :apple       #我指定name變數的值為符號apple</span><br><span class="line">         </span><br><span class="line">#下面這行語法錯誤，符號不能指定成字串，而且他是一個值，無法放在等號左邊</span><br><span class="line">:apple = 1</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="什麼是字串"><a href="#什麼是字串" class="headerlink" title="什麼是字串"></a><em><strong>什麼是字串</strong></em></h1><h2 id="1-定義：把內容用引號框起來變成一個字串物件"><a href="#1-定義：把內容用引號框起來變成一個字串物件" class="headerlink" title="1.定義：把內容用引號框起來變成一個字串物件"></a>1.定義：把內容用引號框起來變成一個字串物件</h2><h2 id="2-語法："><a href="#2-語法：" class="headerlink" title="2.語法："></a>2.語法：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;aa&#x27;               #單引號字串，特色:不能把變數帶到字串當中</span><br><span class="line">&quot;aa&quot;               #雙引號字串，特色:能把變數帶到字串當中</span><br></pre></td></tr></table></figure>
<h2 id="3-雙引號字串舉例："><a href="#3-雙引號字串舉例：" class="headerlink" title="3.雙引號字串舉例："></a>3.雙引號字串舉例：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name = &quot;Jason&quot;</span><br><span class="line">age = 18</span><br><span class="line">puts &quot;hi I am #&#123;name&#125;, and I am #&#123;age&#125; years old&quot;</span><br><span class="line">#會印出 hi I am Jason, and I am 18 years old</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="他們的差別"><a href="#他們的差別" class="headerlink" title="他們的差別"></a><em><strong>他們的差別</strong></em></h1><h2 id="1-字串的值可以改，符號不行"><a href="#1-字串的值可以改，符號不行" class="headerlink" title="1.字串的值可以改，符號不行"></a>1.字串的值可以改，符號不行</h2><h2 id="2-符號效能比字串好一點："><a href="#2-符號效能比字串好一點：" class="headerlink" title="2.符號效能比字串好一點："></a>2.符號效能比字串好一點：</h2><p>同個名字的符號，在記憶體裡面只有佔一個ID，但早期用完不會還(所以早期不一定比較省記憶體)。而字串每一個都有各自的ID，但用完會還。<br>補充：<br>在Ruby裡，數字物件的object ID 公式是2n+1，如果是2，object ID 是5，如果是5，object ID 是11，所以單數的object ID號碼大部分都是數字物件。</p>
<hr>
<h1 id="個別使用時機-（簡單區分）"><a href="#個別使用時機-（簡單區分）" class="headerlink" title="個別使用時機 （簡單區分）"></a><em><strong>個別使用時機 （簡單區分）</strong></em></h1><h2 id="1-如果這個東西不可變，用符號或冷凍字串"><a href="#1-如果這個東西不可變，用符號或冷凍字串" class="headerlink" title="1.如果這個東西不可變，用符號或冷凍字串"></a>1.如果這個東西不可變，用符號或冷凍字串</h2><h2 id="2-如果這個東西需要組合或變動的話，用字串"><a href="#2-如果這個東西需要組合或變動的話，用字串" class="headerlink" title="2.如果這個東西需要組合或變動的話，用字串"></a>2.如果這個東西需要組合或變動的話，用字串</h2><p>補充：<br>冷凍字串：目的是讓此物件的object ID 固定。</p>
<h2 id="3-語法："><a href="#3-語法：" class="headerlink" title="3.語法："></a>3.語法：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">puts &quot;hello&quot;.freeze.object_id       #這邊用了freeze的方法</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="字串和符號轉換"><a href="#字串和符號轉換" class="headerlink" title="字串和符號轉換"></a><em><strong>字串和符號轉換</strong></em></h1><h2 id="1-語法-to-sym，sym就是symbol"><a href="#1-語法-to-sym，sym就是symbol" class="headerlink" title="1. 語法 to_sym，sym就是symbol"></a>1. 語法 to_sym，sym就是symbol</h2><h2 id="2-語法-to-s-，-s就是string"><a href="#2-語法-to-s-，-s就是string" class="headerlink" title="2. 語法 to_s ， s就是string"></a>2. 語法 to_s ， s就是string</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#字串轉符號</span><br><span class="line">p &quot;name&quot;.to_sym     #印出 :name ，這個方法常用</span><br><span class="line">p &quot;name&quot;.intern     #印出 :name</span><br><span class="line">#符號轉字串 </span><br><span class="line">p :name.to_s        #印出 &quot;name&quot; ，這個方法常用 </span><br><span class="line">p :name.id2name     #印出 &quot;name&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>符號</tag>
        <tag>字串</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby新手村-模組</title>
    <url>/2022/11/28/Ruby%E6%96%B0%E6%89%8B%E6%9D%91-%E6%A8%A1%E7%B5%84/</url>
    <content><![CDATA[<hr>
<h1 id=""><a href="#" class="headerlink" title=""></a><div class="note info">
            <p><strong>『本篇重點』：什麼是模組?如何使用模組在類別中?模組和類別的差異?</strong>  </p>
          </div></h1><hr>
<p>在之前的文章「Ruby新手村-物件導向程式設計（OOP）」中的最後有提到模組module，當時是以技能去解讀它，接下來就讓我們來看看什麼是模組吧～</p>
<hr>
<h1 id="什麼是模組"><a href="#什麼是模組" class="headerlink" title="什麼是模組"></a><em><strong>什麼是模組</strong></em></h1><h2 id="1-解釋："><a href="#1-解釋：" class="headerlink" title="1. 解釋："></a>1. 解釋：</h2><p>一項非繼承而來的額外技能，我可以藉由引入模組來使用它，像是狗狗學會[撿報紙]，我可以說我在『狗類別』裡面引入[撿報紙]的模組，貓咪學會[翻跟斗]，我可以說我在『貓類別』裡面引入[翻跟斗]的模組。</p>
<h2 id="2-命名原則："><a href="#2-命名原則：" class="headerlink" title="2. 命名原則："></a>2. 命名原則：</h2><p>命名規定跟類別命名一樣，必須是常數</p>
<h2 id="3-語法："><a href="#3-語法：" class="headerlink" title="3. 語法："></a>3. 語法：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module ModuleName            </span><br><span class="line"> #此模組會做的事</span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="如何使用模組在類別中"><a href="#如何使用模組在類別中" class="headerlink" title="如何使用模組在類別中"></a><em><strong>如何使用模組在類別中</strong></em></h1><h2 id="1-模組使用方式"><a href="#1-模組使用方式" class="headerlink" title="1. 模組使用方式"></a>1. 模組使用方式</h2><p>(1) 引入include，他作用在實體上面(也就是實體使用了模組這個方法)，所以稱此模組為實體方法，舉例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#為了方便說明，模組內容的部分以中文表示，實際上要使用英文</span><br><span class="line">module DogSkill           #創造一個DogSkill狗技能模組</span><br><span class="line">  撿報紙                   #這個模組做的事情是撿報紙</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">class Dog</span><br><span class="line">  include DogSkill        #引入DogSkill狗技能這個模組在狗類別當中</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">lucky = Dog.new           #在狗類別創造一個叫lucky的狗狗</span><br><span class="line">lucky.撿報紙               #在lucky狗狗實體上使用撿報紙的技能，撿報紙就是實體方法</span><br></pre></td></tr></table></figure>

<p>(2) 擴充extend，他作用在類別上面(也就是幫類別擴充方法)，所以稱此模組為類別方法，舉例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#為了方便說明，模組內容的部分以中文表示，實際上要使用英文</span><br><span class="line">module CatSkill           #創造一個CatSkill貓技能模組</span><br><span class="line">  翻跟斗                   #這個模組做的事情是翻跟斗</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">class Cat</span><br><span class="line">  extend CatSkill         #擴充CatSkill貓技能這個模組在貓類別當中</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">Cat.翻跟斗                 #貓類別可以直接使用翻跟斗模組，所以說翻跟斗是類別方法</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="模組和類別的差異"><a href="#模組和類別的差異" class="headerlink" title="模組和類別的差異"></a><em><strong>模組和類別的差異</strong></em></h1><p>以之前提到的兩個故事為例</p>
<h2 id="1-火影忍者："><a href="#1-火影忍者：" class="headerlink" title="1. 火影忍者："></a>1. 火影忍者：</h2><p>{佐助}的「寫輪眼」是『宇智坡』這個家族繼承而來，而[須佐能乎]是他後天自己學會的技能模組</p>
<h2 id="2-貓狗大戰："><a href="#2-貓狗大戰：" class="headerlink" title="2. 貓狗大戰："></a>2. 貓狗大戰：</h2><p>『狗』並非天生就會[撿報紙]，『貓』並非天生就會[翻跟斗]</p>
<h2 id="3-模組跟類別雖然很像，但他們還是有差別"><a href="#3-模組跟類別雖然很像，但他們還是有差別" class="headerlink" title="3. 模組跟類別雖然很像，但他們還是有差別:"></a>3. 模組跟類別雖然很像，但他們還是有差別:</h2><h3 id="1-模組沒有繼承功能，而類別有"><a href="#1-模組沒有繼承功能，而類別有" class="headerlink" title="(1) 模組沒有繼承功能，而類別有"></a>(1) 模組沒有繼承功能，而類別有</h3><p>如同上述[須佐能乎]、[撿報紙]、[翻跟斗]無法繼承</p>
<h3 id="2-模組不能實體化，類別可以"><a href="#2-模組不能實體化，類別可以" class="headerlink" title="(2) 模組不能實體化，類別可以"></a>(2) 模組不能實體化，類別可以</h3><p>『貓類』可以創造很多不同名字的貓咪實體，而[翻跟斗]無法創造任何東西，而且從字面來看，應該很好理解～</p>
<hr>
<p>看完本篇模組介紹，我想大家對於「Ruby新手村-物件導向程式設計（OOP）」那篇的內容有更多的了解，之後還會有關於更多物件的相關原理及觀念會持續分享，敬請期待～</p>
]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>模組</tag>
        <tag>類別</tag>
        <tag>module</tag>
        <tag>命名</tag>
        <tag>include</tag>
        <tag>extend</tag>
      </tags>
  </entry>
  <entry>
    <title>Ruby新手村-物件導向程式設計(OOP)</title>
    <url>/2022/11/28/Ruby%E6%96%B0%E6%89%8B%E6%9D%91-%E7%89%A9%E4%BB%B6%E5%B0%8E%E5%90%91%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-OOP/</url>
    <content><![CDATA[<hr>
<h1 id=""><a href="#" class="headerlink" title=""></a><div class="note info">
            <p><strong>『本篇重點』：兩個故事，物件導向程式設計簡介，為何要使用OOP?什麼是類別?什麼是實體?什麼是繼承?故事講解</strong>  </p>
          </div></h1><hr>
<h1 id="兩個故事"><a href="#兩個故事" class="headerlink" title="兩個故事"></a><em><strong>兩個故事</strong></em></h1><p>為了方便大家理解專業術語，我們先來聽聽兩個故事</p>
<h2 id="1-火影忍者："><a href="#1-火影忍者：" class="headerlink" title="1. 火影忍者："></a>1. 火影忍者：</h2><p>不知大家有沒有看過火影忍者(完全沒看過說不過去拉！)，看過的人都知道宅女男神{佐助}，他的來自『宇智波』家族，招牌招式莫過於「血輪眼了」，當然還有更帥的招式[須佐能乎]</p>
<h2 id="2-貓狗大戰："><a href="#2-貓狗大戰：" class="headerlink" title="2. 貓狗大戰："></a>2. 貓狗大戰：</h2><p>常常大家都會問你是『貓』派還是『狗』派？想必大家都有被某種『動物』可愛模樣融化的經驗，或許是一個叫{kitty}『貓』的「傲嬌個性」不時還會[討摸]，有機會還可以訓練[翻跟斗]，還是叫{lucky}『狗』的「效忠個性」總是看著主人[搖尾巴]，還可以訓練他們[拿報紙]</p>
<p>聽完這兩個完全不一樣的故事，是不是很莫名其妙，哈哈，但其實針對故事內的索引號，可以套用到今天要講的內容中</p>
<hr>
<h1 id="物件導向程式設計-OOP-簡介"><a href="#物件導向程式設計-OOP-簡介" class="headerlink" title="物件導向程式設計(OOP)簡介"></a><em><strong>物件導向程式設計(OOP)簡介</strong></em></h1><p><img src="https://i.imgur.com/wo1IIPn.png"></p>
<h2 id="1-什麼是物件"><a href="#1-什麼是物件" class="headerlink" title="1.什麼是物件:"></a>1.什麼是物件:</h2><p>物件 ＝ 狀態（名詞）＋ 行為（動詞）</p>
<h2 id="2-為何要使用oop"><a href="#2-為何要使用oop" class="headerlink" title="2.為何要使用oop:"></a>2.為何要使用oop:</h2><p>為了用擬人化的方式去做分類和操作，讓程式碼更容易使用和理解</p>
<p><strong>[冷知識]：在Ruby裡幾乎什麼東西都是物件，那什麼不是物件？</strong></p>
<p>答案是：Block 和 方法</p>
<hr>
<h1 id="什麼是類別-class"><a href="#什麼是類別-class" class="headerlink" title="什麼是類別(class)"></a><em><strong>什麼是類別(class)</strong></em></h1><h2 id="1-他是OOP常用到的觀念之一"><a href="#1-他是OOP常用到的觀念之一" class="headerlink" title="1. 他是OOP常用到的觀念之一"></a>1. 他是OOP常用到的觀念之一</h2><h2 id="2-此定義方法使用對象為實體，也可以說通常實體是某個類別的產物"><a href="#2-此定義方法使用對象為實體，也可以說通常實體是某個類別的產物" class="headerlink" title="2. 此定義方法使用對象為實體，也可以說通常實體是某個類別的產物"></a>2. 此定義方法使用對象為實體，也可以說通常實體是某個類別的產物</h2><h2 id="3-類別的命名規定-＝-名字第一個字必須是常數"><a href="#3-類別的命名規定-＝-名字第一個字必須是常數" class="headerlink" title="3. 類別的命名規定 ＝ 名字第一個字必須是常數"></a>3. 類別的命名規定 ＝ 名字第一個字必須是常數</h2><hr>
<h1 id="什麼是實體"><a href="#什麼是實體" class="headerlink" title="什麼是實體"></a><em><strong>什麼是實體</strong></em></h1><h2 id="1-他是OOP常用到的觀念之一-1"><a href="#1-他是OOP常用到的觀念之一-1" class="headerlink" title="1. 他是OOP常用到的觀念之一"></a>1. 他是OOP常用到的觀念之一</h2><h2 id="2-針對某個類別創造出的個體"><a href="#2-針對某個類別創造出的個體" class="headerlink" title="2. 針對某個類別創造出的個體"></a>2. 針對某個類別創造出的個體</h2><h2 id="3-類別的命名規則沒有特別規定"><a href="#3-類別的命名規則沒有特別規定" class="headerlink" title="3. 類別的命名規則沒有特別規定"></a>3. 類別的命名規則沒有特別規定</h2><hr>
<h1 id="什麼是繼承"><a href="#什麼是繼承" class="headerlink" title="什麼是繼承"></a>什麼是繼承</h1><h2 id="1-與其說是繼承不如說是分類"><a href="#1-與其說是繼承不如說是分類" class="headerlink" title="1. 與其說是繼承不如說是分類"></a>1. 與其說是繼承不如說是分類</h2><h2 id="2-同個分類創造的實體，都會有相同的特徵"><a href="#2-同個分類創造的實體，都會有相同的特徵" class="headerlink" title="2. 同個分類創造的實體，都會有相同的特徵"></a>2. 同個分類創造的實體，都會有相同的特徵</h2><p>用以下程式碼例子說明類別與實體和繼承的關係：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Cat                         #在貓的類別當中</span><br><span class="line"> def eat(food)                    #他們有個吃東西的方法 </span><br><span class="line">  puts &quot;#&#123;food&#125; 好吃！&quot;            #這個方法會有食物好吃的動作</span><br><span class="line"> end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">kitty = Cat.new                   #在貓類別創造一個叫kitty的實體貓</span><br><span class="line">kitty.eat &quot;魚&quot;                    #因為kitty也是貓類，所以他也會有吃東西的方法吃魚</span><br><span class="line"></span><br><span class="line">#會印出： 魚 好吃！</span><br></pre></td></tr></table></figure>
<p>簡單來說，以目前所學：</p>
<p>我們可以有很多種類別，以貓類和狗類為例，針對不同種類可以產生不同類型的狗和貓，他們有會因為彼此類別的不同，繼承相對應的方法動作(特徵)</p>
<hr>
<h1 id="故事講解"><a href="#故事講解" class="headerlink" title="故事講解"></a>故事講解</h1><p>聽完這些專業術語，對於沒學程式的人或許還是很難理解，不然我們來講解剛剛一開始的故事吧～</p>
<h2 id="1-火影忍者：-1"><a href="#1-火影忍者：-1" class="headerlink" title="1. 火影忍者："></a>1. 火影忍者：</h2><p>套用剛剛所學，{佐助}這個實體，來自『宇智波』家族這個類別，而這個家族的人都繼承了「寫輪眼」這個技能方法，這樣不就把剛剛的東西串起來了嗎？(或許抓到感覺了？可能喔～哈哈)</p>
<h2 id="2-貓狗大戰：-1"><a href="#2-貓狗大戰：-1" class="headerlink" title="2. 貓狗大戰："></a>2. 貓狗大戰：</h2><p>『貓咪』和『狗狗』同樣都來自『哺乳動物』這個類別，所以他們都繼承了『哺乳動物』的特性，然而貓狗兩類都有各自的世界，像是『貓類』所創造的{kitty}貓咪，他們都繼承了「傲嬌的個性」，『狗類』所創造的{lucky}狗狗，他們都繼承了「效忠的性格」(這個例子或許比較容易讓大家接受吧？你是貓派還是狗派呢？)</p>
<p>補充：</p>
<p>或許有人疑惑那{佐助}的[須佐能乎]帥氣技能呢？{貓}的[討拍]跟[翻跟斗]呢？{狗}的[搖尾巴]跟[拿報紙]呢？由於這些技能在其他種類也有機會學會，所以我把他歸類到之後會介紹的模組module</p>
]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>類別</tag>
        <tag>命名</tag>
        <tag>oop</tag>
        <tag>實體</tag>
        <tag>繼承</tag>
        <tag>物件</tag>
        <tag>Block</tag>
      </tags>
  </entry>
</search>
